{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","urlChecker","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","isUrlWrong","event","onBlur","onInput","setIsUrlWrong","NewMovie","onAdd","count","setCount","isButtonDisabled","setIsButtonDisabled","isImdbUrlWrong","setIsImdbUrlWrong","isImgUrlWrong","setIsImgUrlWrong","setMovieData","useEffect","trim","handleChange","target","onSubmit","preventDefault","pattern","isThereWrongUrls","test","disabled","App","moviesFromServer","moviesList","setMoviesList","handleAddMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09bffd12.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  urlChecker?: { isUrlWrong: boolean,\n    setIsUrlWrong: (newWalue: boolean) => void },\n  onChange?: (newValue: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  urlChecker = null,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || (urlChecker?.isUrlWrong),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event)}\n          onBlur={() => setTouched(true)}\n          onInput={() => urlChecker?.setIsUrlWrong(false)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {urlChecker?.isUrlWrong && (\n        <p className=\"help is-danger\">URL is incorrect</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd(movie: Movie): void,\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n  const [isImdbUrlWrong, setIsImdbUrlWrong] = useState(false);\n  const [isImgUrlWrong, setIsImgUrlWrong] = useState(false);\n\n  const [movie, setMovieData] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const resetForm = () => {\n    setMovieData({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const submitForm = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    let isThereWrongUrls = false;\n\n    if (!pattern.test(movie.imdbUrl.trim())) {\n      setIsImdbUrlWrong(true);\n      isThereWrongUrls = true;\n    }\n\n    if (!pattern.test(movie.imgUrl.trim())) {\n      setIsImgUrlWrong(true);\n      isThereWrongUrls = true;\n    }\n\n    if (isThereWrongUrls) {\n      return;\n    }\n\n    setCount(count + 1);\n\n    onAdd(movie);\n\n    resetForm();\n  };\n\n  useEffect(() => {\n    if (movie.title.trim() && movie.imdbId.trim()\n      && movie.imdbUrl.trim() && movie.imgUrl.trim()) {\n      setIsButtonDisabled(false);\n    } else {\n      setIsButtonDisabled(true);\n    }\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setMovieData({ ...movie, [name]: value });\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={submitForm}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(event) => handleChange(event)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(event) => handleChange(event)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={(event) => handleChange(event)}\n        urlChecker={{\n          isUrlWrong: isImgUrlWrong,\n          setIsUrlWrong: setIsImgUrlWrong,\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={(event) => handleChange(event)}\n        urlChecker={{\n          isUrlWrong: isImdbUrlWrong,\n          setIsUrlWrong: setIsImdbUrlWrong,\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={(event) => handleChange(event)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isButtonDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState(moviesFromServer);\n\n  const handleAddMovie = (movie: Movie) => {\n    setMoviesList([...moviesList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => handleAddMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}